---
// This component contains the contact form, particle background, and all associated animations.
// This version is configured for a JavaScript-based (AJAX) submission to Netlify,
// includes email obfuscation, and all spam protection features.
---

<style>
    :root {
      --pulledin-red: #D81E2C; 
    }
    #particle-canvas {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 0;
    }
    .contact-section {
        min-height: 100vh; width: 100%; display: flex; align-items: center;
        padding: 6rem 2rem 4rem; position: relative; z-index: 1;
    }
    .contact-grid {
        display: grid; grid-template-columns: repeat(12, 1fr); gap: 2rem;
        width: 100%; max-width: 1400px; margin: 0 auto; align-items: center;
    }
    .contact-text-content {
        grid-column: 1 / span 6;
    }
    .contact-headline {
        font-family: var(--font-headline); font-size: clamp(3.5rem, 10vw, 8rem);
        line-height: 1.1; margin-bottom: 2rem;
    }
    .contact-details h3 {
        font-family: var(--font-headline); font-size: 1rem; margin-bottom: 0.5rem;
        opacity: 0.7; margin-top: 2rem;
    }
    .contact-details a {
        font-size: 1.2rem; text-decoration: none; color: var(--primary);
        display: inline-block; margin-right: 1.5rem;
    }
    .contact-details a:hover {
        text-decoration: underline;
    }
    .contact-form-container {
        grid-column: 7 / span 6;
    }
    .contact-form .form-group {
        position: relative; margin-bottom: 2rem;
    }
    .contact-form .form-input {
        width: 100%; padding: 1.2rem 0; border: none;
        border-bottom: 2px solid rgba(0,0,0,0.3); background-color: transparent;
        font-family: var(--font-body); font-size: 1.1rem; color: var(--primary);
        transition: border-color 0.3s ease;
    }
    .contact-form .form-input:focus {
        outline: none; border-color: var(--primary);
    }
    .contact-form .form-label {
        position: absolute; top: 1.2rem; left: 0; font-size: 1.1rem;
        color: rgba(0,0,0,0.5); pointer-events: none; transition: all 0.3s ease;
    }
    .contact-form .form-input:focus + .form-label,
    .contact-form .form-input:not(:placeholder-shown) + .form-label {
        top: -0.8rem; font-size: 0.8rem; color: var(--primary);
    }
    .contact-form textarea.form-input {
        min-height: 120px; resize: vertical;
    }
    #send-button-wrapper {
        position: relative; width: 150px; height: 150px;
        margin-top: 2rem; margin-left: auto; /* Align to the right */
        overflow: visible; /* Allow particles to burst out */
    }
    #send-button {
        position: absolute; top: 0; left: 0; width: 100%;
        height: 100%; background: var(--pulledin-red);
        color: var(--white); border-radius: 50%; display: flex;
        justify-content: center; align-items: center; font-family: var(--font-headline);
        font-size: 1.5rem; cursor: grab; user-select: none; border: none;
    }
    #send-button:active {
        cursor: grabbing;
    }
    #form-status {
        margin-top: 1.5rem; font-size: 1.1rem; font-family: var(--font-headline);
        font-weight: 600; text-align: center; width: 100%;
    }
    @media (max-width: 900px) {
        .contact-grid {
            grid-template-columns: 1fr; gap: 4rem;
        }
        .contact-text-content, .contact-form-container {
            grid-column: 1 / -1; text-align: center;
        }
        #send-button-wrapper {
            margin-right: auto; margin-left: auto;
        }
    }
    .email-svg-object {
        height: 23px;
        vertical-align: middle;
        margin-top: -5px;
    }
    .hidden {
        display: none;
    }
</style>

<canvas id="particle-canvas"></canvas>

<section class="contact-section">
    <div class="contact-grid">
        <div class="contact-text-content">
            <h1 class="contact-headline">Let's Talk.</h1>
            <div class="contact-details">
                <h3>General Inquiries</h3>
                <a href="mailto:anne-marie@pulledin.com">
                    <object class="email-svg-object" width="230" height="24" data="/email.svg" type="image/svg+xml"></object>
                </a>
                <h3>Socials</h3>
                <p>
                    <a href="https://www.linkedin.com/company/pulledin/?viewAsMember=true" target="_blank" rel="noopener noreferrer">LinkedIn</a>
                    <a href="https://www.instagram.com/pulledinpr/" target="_blank" rel="noopener noreferrer">Instagram</a>
                </p>
            </div>
        </div>
        <div class="contact-form-container">
            <form id="contact-form" class="contact-form" name="contact" method="POST" data-netlify="true" netlify-honeypot="bot-field" data-netlify-recaptcha="true">
                <input type="hidden" name="form-name" value="contact" />
                <p class="hidden">
                    <label>
                      Don’t fill this out if you’re human: <input name="bot-field" />
                    </label>
                </p>
                <div class="form-group">
                    <input type="text" id="name" name="name" class="form-input" placeholder=" " required>
                    <label for="name" class="form-label">Your Name</label>
                </div>
                <div class="form-group">
                    <input type="email" id="email" name="email" class="form-input" placeholder=" " required>
                    <label for="email" class="form-label">Your Email</label>
                </div>
                <div class="form-group">
                    <textarea id="message" name="message" class="form-input" placeholder=" " required></textarea>
                    <label for="message" class="form-label">Your Message</label>
                </div>
                <div data-netlify-recaptcha="true"></div>
            </form>
            <div id="send-button-wrapper">
                <button type="button" id="send-button">Send</button>
            </div>
            <div id="form-status"></div>
        </div>
    </div>
</section>

<script is:inline>
    // This script handles BOTH the animations AND the custom Netlify form submission
    document.addEventListener('DOMContentLoaded', function () {
        // ... (The entire, correct JavaScript is preserved below)
        const particleCanvas = document.getElementById('particle-canvas');
        if (particleCanvas) {
            const ctx = particleCanvas.getContext('2d');
            particleCanvas.width = window.innerWidth;
            particleCanvas.height = window.innerHeight;
            let particlesArray = [];
            const numberOfParticles = 100;
            const mouse = { x: null, y: null, radius: 150 };

            window.addEventListener('mousemove', function(event) {
                mouse.x = event.x; mouse.y = event.y;
            });

            class Particle {
                constructor(x, y, size, weight) {
                    this.x = x; this.y = y; this.size = size; this.weight = weight;
                    this.baseX = this.x; this.baseY = this.y;
                }
                draw() {
                    let gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size);
                    gradient.addColorStop(0, 'rgba(0, 0, 0, 0.3)');
                    gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
                    ctx.fillStyle = gradient;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
                    ctx.fill();
                }
                update() {
                    let dx = mouse.x - this.x; let dy = mouse.y - this.y;
                    let distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < 0) distance = 0;
                    let forceDirectionX = distance === 0 ? 0 : dx / distance; 
                    let forceDirectionY = distance === 0 ? 0 : dy / distance;
                    let maxDistance = mouse.radius;
                    let force = (maxDistance - distance) / maxDistance;
                    if (force < 0) force = 0;
                    let directionX = forceDirectionX * force * this.weight;
                    let directionY = forceDirectionY * force * this.weight;
                    if (distance < mouse.radius) {
                        this.x -= directionX; this.y -= directionY;
                    } else {
                        if (this.x !== this.baseX) { this.x -= (this.x - this.baseX) / 10; }
                        if (this.y !== this.baseY) { this.y -= (this.y - this.baseY) / 10; }
                    }
                }
            }

            function initParticles() {
                particlesArray = [];
                for (let i = 0; i < numberOfParticles; i++) {
                    let size = (Math.random() * 8) + 4;
                    let x = (Math.random() * ((innerWidth - size * 2) - (size * 2)) + size * 2);
                    let y = (Math.random() * ((innerHeight - size * 2) - (size * 2)) + size * 2);
                    let weight = (Math.random() * 1.5) + 1;
                    particlesArray.push(new Particle(x, y, size, weight));
                }
            }

            function animateParticles() {
                ctx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
                for (let i = 0; i < particlesArray.length; i++) {
                    particlesArray[i].update();
                    particlesArray[i].draw();
                }
                requestAnimationFrame(animateParticles);
            }
            initParticles();
            animateParticles();
            window.addEventListener('resize', () => {
                particleCanvas.width = window.innerWidth;
                particleCanvas.height = window.innerHeight;
                initParticles();
            });
        }
        
        const form = document.getElementById('contact-form');
        const formStatus = document.getElementById('form-status');
        const sendButton = document.getElementById('send-button');
        const sendButtonWrapper = document.getElementById('send-button-wrapper');

        if (form && formStatus && sendButton && sendButtonWrapper) {
            if (typeof gsap !== 'undefined' && typeof Draggable !== 'undefined') {
                gsap.registerPlugin(Draggable);
                Draggable.create(sendButton, {
                    type: "x,y",
                    bounds: sendButtonWrapper,
                    onRelease: function() {
                        gsap.to(this.target, { x: 0, y: 0, duration: 0.8, ease: "elastic.out(1, 0.5)" });
                    }
                });
            }

            function createBurst() {
                 for (let i = 0; i < 25; i++) {
                    const particle = document.createElement('div');
                    particle.style.position = 'absolute';
                    particle.style.left = '50%';
                    particle.style.top = '50%';
                    particle.style.width = '10px';
                    particle.style.height = '10px';
                    particle.style.backgroundColor = 'var(--pulledin-red)';
                    particle.style.borderRadius = '50%';
                    particle.style.transform = 'translate(-50%, -50%)';
                    sendButtonWrapper.appendChild(particle);

                    gsap.to(particle, {
                        x: (Math.random() - 0.5) * 350,
                        y: (Math.random() - 0.5) * 350,
                        opacity: 0,
                        scale: 0,
                        duration: 0.7 + Math.random() * 0.5,
                        ease: 'power2.out',
                        onComplete: () => {
                            particle.remove();
                        }
                    });
                }
            }

            const handleSubmit = (event) => {
                event.preventDefault();

                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }

                createBurst();

                const formData = new FormData(form);
                formStatus.textContent = 'Sending...';

                fetch("/", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams(formData).toString(),
                })
                .then(() => {
                    formStatus.textContent = "Thanks for your submission!";
                    form.reset();
                    if (typeof gsap !== 'undefined') {
                        gsap.to([form, sendButtonWrapper], { 
                            opacity: 0, 
                            duration: 0.5, 
                            onComplete: () => {
                                form.style.display = 'none';
                                sendButtonWrapper.style.display = 'none';
                            }
                        });
                    }
                })
                .catch((error) => {
                    console.error('Error submitting form:', error);
                    formStatus.textContent = "Oops! A network problem occurred.";
                });
            };

            sendButton.addEventListener("click", handleSubmit);
        }
    });
</script>