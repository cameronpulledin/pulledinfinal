---
// src/pages/events/[slug].astro

import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';


export async function getStaticPaths() {
  const allEvents = await getCollection('events');
  return allEvents.map(event => ({
    params: { slug: event.slug },
    props: { event },
  }));
}

type Props = {
  event: CollectionEntry<'events'>;
}

const { event } = Astro.props;
// Use the new explicit variable names
const { 
    eventName, 
    seoTitle, 
    seoDescription, 
    socialImage, 
    eventYear, 
    eventJobs, 
    eventFormats, 
    eventGallery 
} = event.data;

const { Content } = await event.render();
---

<Layout 
    title={seoTitle} 
    metaDescription={seoDescription} 
    ogImage={socialImage?.src}
>
    
   <div class="shrinking-hero-container">
        <div class="title-bg">{eventName}</div>
        <h1 class="title-fg">{eventName}</h1>
    </div>
    <div class="hero-spacer"></div>

    <main class="event-content-section">
        <div class="event-grid">
            <div class="event-grid-left">
                <p>{eventYear}</p>
                <div class="side-details">
                    <div class="detail-item">
                        <h3>Jobs Performed</h3>
                        <ul class="jobs-list">
                            {eventJobs.map((job) => <li>{job}</li>)}
                        </ul>
                    </div>
                </div>
            </div>
            <div class="event-grid-right">
                <Content />
                <ul class="event-format-list">
                    {eventFormats.map((format) => <li>{format}</li>)}
                </ul>
            </div>
        </div>
        
        <section class="interactive-gallery-section">
            <div class="gallery-container">
                <div class="gallery-wrapper"></div>
            </div>
        </section>
    </main>

    <style>
        .shrinking-hero-container {
            position: fixed;
            top: 30px;
            left: 30px;
            z-index: 1000;
            transform-origin: top left;
            will-change: transform;
        }
        .title-bg, .title-fg {
            font-family: var(--font-headline);
            font-size: 1.75rem;
            font-weight: 700;
            margin: 0;
        }
        .title-bg {
            color: var(--font-headline);
            opacity: 1;
        }
        .title-fg {
            color: var(--primary);
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
        }
        .hero-spacer {
            height: 100vh;
            width: 100%;
        }
        main.event-content-section {
            position: relative;
            z-index: 5;
            background-color: var(--background);
            height: auto;
        }
        .event-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 2rem;
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }
        @media (min-width: 768px) {
            .event-grid {
                grid-template-columns: 1fr 2fr;
                padding: 5rem 2rem;
            }
        }
        .event-grid-right > :global(p) {
            font-size: 1.3rem;
            line-height: 1.6;
            margin-bottom: 1.5rem;
        }
        .event-grid-left .side-details {
            margin-top: 2rem;
            opacity: 0.8;
        }
        .event-grid-left .detail-item {
            margin-bottom: 1.5rem;
        }
        .event-grid-left .detail-item h3 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
            color: var(--primary);
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .event-grid-left .jobs-list {
            font-size: 1.25rem;
            font-family: var(--font-inconsolata);
            list-style: none;
            padding: 0;
            margin: 0;
            line-height: 1.6;
        }
        .event-grid-left > p:first-child {
            font-size: 1.25rem;
            font-family: var(--font-inconsolata);
            color: var(--primary);
            margin-bottom: 2.5rem;
        }
        @keyframes animated-gradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        .event-format-list {
            list-style: none;
            padding: 0;
            margin-top: 2rem;
            border-top: 2px solid transparent;
            position: relative;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            grid-gap: 0 2rem;
        }
        .event-format-list::before {
            content: '';
            position: absolute;
            top: -2px; left: 0; right: 0;
            height: 2px;
            background: linear-gradient(60deg, #3b82f6, #8b5cf6, #ec4899, #3b82f6);
            background-size: 300% 300%;
            animation: animated-gradient 8s ease-in-out infinite;
        }
        .event-format-list li {
            padding: 1rem 0;
            font-size: 1.1rem;
            font-family: var(--font-inconsolata);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }
    </style>

    <style is:global>
        .interactive-gallery-section { height: auto; width: 100%; display: flex; align-items: center; background-color: var(--background); overflow: hidden; padding: 4rem 0; }
        .gallery-container { width: 100%; overflow-x: auto; cursor: grab; }
        .gallery-container:active { cursor: grabbing; }
        .gallery-container::-webkit-scrollbar { display: none; }
        .gallery-container { -ms-overflow-style: none; scrollbar-width: none; }
        .gallery-wrapper { display: flex; position: relative; padding: 0 2rem; width: max-content; }
        .gallery-item { width: 250px; flex-shrink: 0; margin: 0 0.5rem; border: 1px solid var(--black); cursor: pointer; display: flex; flex-direction: column; transition: background-color 0.3s ease; }
        .gallery-item:hover { background-color: rgba(255, 255, 255, 0.5); }
        .gallery-item-media { flex-grow: 1; overflow: hidden; background-color: var(--black); pointer-events: none; }
        .gallery-item-media img { height: 100%; width: 100%; display: block; object-fit: contain; }
        .gallery-item-title { padding: 5px; font-family: var(--font-inconsolata); font-size: 12px; line-height: 1.2; flex-shrink: 0; border-top: 1px solid var(--black); }
        .lightbox-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.85); backdrop-filter: blur(10px); z-index: 9999; visibility: hidden; opacity: 0; }
        .lightbox-content { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; height: 90%; max-width: 1200px; display: flex; justify-content: center; align-items: center; }
        .lightbox-content > * { max-width: 100%; max-height: 100%; }
        .lightbox-content > iframe { aspect-ratio: 16 / 9; width: 100%; height: auto; }
        .lightbox-close { position: absolute; top: 20px; right: 20px; width: 35px; height: 35px; cursor: pointer; color: white; z-index: 10001; }
        .lightbox-close svg { width: 100%; height: 100%; }
        body.lightbox-is-open .site-header, body.lightbox-is-open .menu-toggle-btn { display: none; }
        @media (max-width: 768px) { .gallery-item { width: 80vw; } }
    </style>
    
    <script define:vars={{ eventGallery }}>
        document.addEventListener('DOMContentLoaded', function () {
            if (typeof gsap === 'undefined') { return; }
            gsap.registerPlugin(ScrollTrigger, Draggable);

            // âœ… CORRECTED Shrinking Title Animation
            const container = document.querySelector(".shrinking-hero-container");
            const titleBg = document.querySelector(".title-bg");
            
            // Calculate the scale needed to make the title fill the viewport width
            // We do this after a tiny delay to ensure fonts are rendered.
            gsap.delayedCall(0.01, () => {
                const requiredScale = window.innerWidth / titleBg.offsetWidth;

                const tl = gsap.timeline({ 
                    scrollTrigger: { 
                        trigger: ".event-content-section", 
                        scrub: true, 
                        start: "top bottom", 
                        end: "top 25%" 
                    } 
                });

                // Animate FROM a centered, full-width state
                tl.from(container, { 
                    x: "50vw", 
                    y: "50vh", 
                    xPercent: -50, 
                    yPercent: -50, 
                    scale: requiredScale,
                    transformOrigin: "center center", // Animate from a center origin
                    ease: "none" 
                }, 0);

                // The foreground title still needs to fade in.
                tl.to(".title-fg", { opacity: 1, duration: 0.1 }, 0.85);
            });


            // Interactive Gallery & Lightbox Logic
            const galleryContainer = document.querySelector('.gallery-container');
            const galleryWrapper = document.querySelector('.gallery-wrapper');
            if (!galleryContainer || !galleryWrapper) return;
            
            const contentData = eventGallery;
            let lightboxPlayer = null;
            
            contentData.forEach((item, index) => {
                const itemEl = document.createElement('div');
                itemEl.className = 'gallery-item';
                itemEl.dataset.index = index;
                const mediaWrapper = document.createElement('div');
                mediaWrapper.className = 'gallery-item-media';
                if (item.type === 'youtube') {
                    mediaWrapper.innerHTML = `<img src="https://i.ytimg.com/vi/${item.videoId}/hqdefault.jpg" alt="${item.title}">`;
                } else if (item.src) {
                    mediaWrapper.innerHTML = `<img src="${item.src.src}" alt="${item.title}">`;
                }
                const titleEl = document.createElement('div');
                titleEl.className = 'gallery-item-title';
                titleEl.textContent = item.title;
                itemEl.appendChild(mediaWrapper);
                itemEl.appendChild(titleEl);
                galleryWrapper.appendChild(itemEl);
            });

            let autoScrollTween;
            gsap.delayedCall(0.5, () => {
                let maxScroll = galleryWrapper.scrollWidth - galleryContainer.offsetWidth;
                if (maxScroll < 0) maxScroll = 0;
                autoScrollTween = gsap.to(galleryWrapper, { x: -maxScroll, duration: contentData.length * 5, ease: "none", repeat: -1, yoyo: true });
                Draggable.create(galleryWrapper, { type: "x", bounds: { minX: 0, maxX: -maxScroll }, inertia: true, edgeResistance: 0.85, onPress: () => autoScrollTween.pause(), onDragEnd: () => autoScrollTween.play() });
                galleryContainer.addEventListener('mouseenter', () => autoScrollTween.pause());
                galleryContainer.addEventListener('mouseleave', () => autoScrollTween.play());
            });

            let lightboxOverlay, lightboxContent;
            function createLightbox() {
                lightboxOverlay = document.createElement('div');
                lightboxOverlay.className = 'lightbox-overlay';
                lightboxOverlay.innerHTML = `<div class="lightbox-content"></div><div class="lightbox-close"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></div>`;
                document.body.appendChild(lightboxOverlay);
                lightboxContent = lightboxOverlay.querySelector('.lightbox-content');
                lightboxOverlay.querySelector('.lightbox-close').addEventListener('click', closeLightbox);
                lightboxOverlay.addEventListener('click', (e) => { if (e.target === lightboxOverlay) closeLightbox(); });
            }

            function showItem(index) {
                if (index < 0 || index >= contentData.length) return;
                if (lightboxPlayer) { lightboxPlayer.destroy(); lightboxPlayer = null; }
                lightboxContent.innerHTML = '';
                const itemData = contentData[index];
                if (itemData.type === 'youtube') {
                    const playerTarget = document.createElement('div');
                    lightboxContent.appendChild(playerTarget);
                    if (typeof YT !== 'undefined' && YT.Player) {
                        lightboxPlayer = new YT.Player(playerTarget, { videoId: itemData.videoId, playerVars: { 'autoplay': 1, 'controls': 1 } });
                    }
                } else if (itemData.type === 'image' && itemData.src) {
                    const img = document.createElement('img');
                    img.src = itemData.src.src; 
                    lightboxContent.appendChild(img);
                }
            }

            function openLightbox(index) {
                if (!lightboxOverlay) createLightbox();
                document.body.classList.add('lightbox-is-open');
                showItem(index);
                gsap.to(lightboxOverlay, { autoAlpha: 1, duration: 0.3 });
                document.addEventListener('keydown', handleKeyPress);
            }

            function closeLightbox() {
                document.body.classList.remove('lightbox-is-open');
                if (lightboxPlayer) { lightboxPlayer.destroy(); lightboxPlayer = null; }
                gsap.to(lightboxOverlay, { autoAlpha: 0, duration: 0.3, onComplete: () => { lightboxContent.innerHTML = ''; } });
                document.removeEventListener('keydown', handleKeyPress);
            }

            function handleKeyPress(e) { if (e.key === 'Escape') closeLightbox(); }

            galleryWrapper.addEventListener('click', (e) => {
                const item = e.target.closest('.gallery-item');
                if (item) openLightbox(parseInt(item.dataset.index, 10));
            });
        });
    </script>
</Layout>